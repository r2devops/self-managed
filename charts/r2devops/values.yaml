front:
  enabled: true
  type: frontend
  name: r2devops-front
  image: docker.io/r2devopsio/frontend
  tag: v1.42.2
  replicaCount: 1
  port: 3000
  livenessEndpoint: "/"
  readinesspoint: "/"
  extraEnv: []
    # - name: xxx
    #   value: "yyyy"
  host: ""
  tls:
    secretName: ""
  resources: {}
    # limits:
    #   cpu: 200m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 64Mi

jobs:
  enabled: true
  type: backend
  name: r2devops-jobs
  image: docker.io/r2devopsio/jobs
  tag: v1.46.2
  replicaCount: 1
  port: 3000
  livenessEndpoint: "/api/health/alive"
  readinesspoint: "/api/health/ready"
  host: ""
  tls:
    secretName: ""
  # Duration of users' session
  sessionTTL: "168h"
  resources: {}

  # Not using secret for R2devops secrets (comment if you use secret)
  extraEnv:
    - name: LICENSE
      value: "<license-key>"
    - name: SECRET_KEY
      value: "<secret-key>"
    - name: GITLAB_OAUTH2_CLIENT_ID
      value: "<gitlab-oauth2-client-id>"
    - name: GITLAB_OAUTH2_CLIENT_SECRET
      value: "<gitlab-oauth2-client-secret>"

  # Using existing secret for R2Devops secrets (uncomment if you use secret)
  # extraEnv:
  #   - name: LICENSE
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "license-key"
  #   - name: SECRET_KEY
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "secret-key"
  #   - name: GITLAB_OAUTH2_CLIENT_ID
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "gitlab-oauth2-client-id"
  #   - name: GITLAB_OAUTH2_CLIENT_SECRET
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "gitlab-oauth2-client-secret"

gitlab:
  domain: "https://gitlab.com"
  organization: ""

worker:
  enabled: true
  type: backend
  name: r2devops-worker
  image: docker.io/r2devopsio/jobs
  tag: v1.46.2
  replicaCount: 20
  args:
    - "./app"
    - "--worker"
  livenessEndpoint: "/job/health/alive"
  readinesspoint: "/job/health/ready"
  extraEnv: []
  addJobsExtraEnv: true
  host: ""
  tls: {}
  resources: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # cert-manager.io/cluster-issuer: letsencrypt-prod

# Custom certificates
customCertificateAuthority:
  configMapName: "r2devops-ca-certificates"
  certificates: []
  # - name: rootCA.crt # Must have the .crt extension
  #   value: |
  #     -----BEGIN CERTIFICATE-----
  #     (SNIPPED FOR BREVITY)
  #     -----END CERTIFICATE-----


# ref. https://github.com/minio/minio/blob/master/helm/minio/values.yaml
minio:
  dependency:
    enabled: false
  custom:
    bucketName: "jobfiles"
    disableSSL: "true"
    forcePathStyle: "true"
    host: ""
    region: "us-east-1"
  resources:
    requests:
      memory: 512Mi
  replicas: 1
  mode: standalone
  persistence:
    enabled: true
    size: 10Gi
  defaultBuckets: jobfiles

  # Not using secret for auth (comment if you use secret)
  auth:
    rootUser: r2devops
    rootPassword: secretpassword

  # Using existing secret for auth (uncomment if you use secret)
  # auth:
  #   existingSecret: "minio-secret"

# ref. https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  dependency:
    enabled: false
  custom:
    host: ""
    dbName: "r2devops"
    sslmode: "disable"
    port: 5432
  primary:
    initdb:
      scripts:
        # creates the database (ref. https://artifacthub.io/packages/helm/bitnami/postgresql#initialize-a-fresh-instance)
        init.sql: |
          CREATE DATABASE r2devops;
  global:
    postgresql:

      # Not using secret for auth (comment if you use secret)
      auth:
        username: r2devops
        password: secretpassword
        postgresPassword: secretpassword

      # Using existing secret for auth password (uncomment if you use secret)
      # auth:
      #   username: r2devops
      #   existingSecret: "postgresql-secret"
      #   secretKeys:
      #     adminPasswordKey: "password"
      #     userPasswordKey: "password"

# ref. https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  dependency:
    enabled: false
  custom:
    host: ""
    user: "default"
    port: 6379
    cert: ""
  replica:
    replicaCount: 0

  # Not using secret for auth (comment if you use secret)
  auth:
    password: secretpassword

  # Using existing secret for auth (uncomment if you use secret)
  # auth:
  #   existingSecret: "redis-secret"
  #   existingSecretPasswordKey: "password"
