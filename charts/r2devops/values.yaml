# -- Additional annotations applied to all resources.
additionalAnnotations: {}

# -- Additional labels applied to all resources.
additionalLabels: {}

front:
  enabled: true
  type: frontend
  name: r2devops-front
  image: docker.io/r2devopsio/frontend
  tag: v2.25.0
  replicaCount: 1
  revisionHistoryLimit: 5
  port: 3000
  livenessEndpoint: "/"
  readinesspoint: "/"
  debug: false
  allowExternalQueries: true
  extraEnv: []
    # Additional frontend environment variables can be added here:
    # - name: CUSTOM_VAR
    #   value: "custom-value"
  host: ""
  tls:
    secretName: ""
  resources: {}
    # limits:
    #   cpu: 200m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 64Mi
  extraIngressAnnotations: {}
  # -- Security context for front containers.
  securityContext:
    # -- Allow privilege escalation within the container.
    allowPrivilegeEscalation: false
    capabilities:
      # -- Drop specified Linux capabilities.
      drop: [ALL]
    # -- Run the container in privileged mode.
    privileged: false
    # -- Enforce running the container as non-root. Leave `false` until the image is able to be run in rootless mode.
    runAsNonRoot: false
    # -- Run the container as the specified user id (uid). Leave `0` until the image is able to be run in rootless mode.
    runAsUser: 0
    # -- Run the container as the specified group id (gid). Leave `0` until the image is able to be run in rootless mode.
    runAsGroup: 0
    seccompProfile:
      # -- The Seccomp profile to apply to this container.
      type: RuntimeDefault
  # -- Optional security context for pods.
  podSecurityContext: {}
  automountServiceAccountToken: true

  # NodeSelector is a selector which must be true for the pod to fit on a node.
  # Selector which must match a node's labels for the pod to be scheduled on that node.
  # For more info see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  nodeSelector: {}

  # Optional pod node tolerations.
  # For more info see https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

jobs:
  enabled: true
  type: backend
  name: r2devops-jobs
  image: docker.io/r2devopsio/jobs
  tag: v2.28.0
  replicaCount: 1
  revisionHistoryLimit: 5
  port: 3000
  livenessEndpoint: "/api/health/alive"
  readinesspoint: "/api/health/ready"
  host: ""
  tls:
    secretName: ""
  # Duration of users' session
  sessionTTL: "168h"
  resources: {}
  # -- Optional existing service account name to use.
  serviceAccountName: ""
  extraIngressAnnotations: {}
  # -- Security context for backend containers.
  securityContext:
    # -- Allow privilege escalation within the container.
    allowPrivilegeEscalation: false
    capabilities:
      # -- Drop specified Linux capabilities.
      drop: [ALL]
    # -- Run the container in privileged mode.
    privileged: false
    # -- Enforce running the container as non-root. Leave `false` until the image is able to be run in rootless mode.
    runAsNonRoot: false
    # -- Run the container as the specified user id (uid). Leave `0` until the image is able to be run in rootless mode.
    runAsUser: 0
    # -- Run the container as the specified group id (gid). Leave `0` until the image is able to be run in rootless mode.
    runAsGroup: 0
    seccompProfile:
      # -- The Seccomp profile to apply to this container.
      type: RuntimeDefault
  # -- Optional security context for pods.
  podSecurityContext: {}
  automountServiceAccountToken: true

  # NodeSelector is a selector which must be true for the pod to fit on a node.
  # Selector which must match a node's labels for the pod to be scheduled on that node.
  # For more info see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  nodeSelector: {}

  # Optional pod node tolerations.
  # For more info see https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

  # Not using secret for R2devops secrets (comment if you use secret)
  extraEnv:
    - name: SECRET_KEY
      value: "<secret-key>"
    - name: GITLAB_OAUTH2_CLIENT_ID
      value: "<gitlab-oauth2-client-id>"
    - name: GITLAB_OAUTH2_CLIENT_SECRET
      value: "<gitlab-oauth2-client-secret>"

  # Using existing secret for R2Devops secrets (uncomment if you use secret)
  # extraEnv:
  #   - name: SECRET_KEY
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "secret-key"
  #   - name: GITLAB_OAUTH2_CLIENT_ID
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "gitlab-oauth2-client-id"
  #   - name: GITLAB_OAUTH2_CLIENT_SECRET
  #     valueFrom:
  #       secretKeyRef:
  #         name: "r2devops-secret"
  #         key: "gitlab-oauth2-client-secret"

gitlab:
  domain: "https://gitlab.com"
  organization: ""

worker:
  enabled: true
  type: backend
  name: r2devops-worker
  image: docker.io/r2devopsio/jobs
  tag: v2.28.0
  replicaCount: 20
  revisionHistoryLimit: 5
  args:
    - "--worker"
  livenessEndpoint: "/job/health/alive"
  readinesspoint: "/job/health/ready"
  extraEnv: []
  addJobsExtraEnv: true
  host: ""
  tls: {}
  resources: {}
  # -- Optional existing service account name to use.
  serviceAccountName: ""
  automountServiceAccountToken: true
  # -- Security context for worker containers.
  securityContext:
    # -- Allow privilege escalation within the container.
    allowPrivilegeEscalation: false
    capabilities:
      # -- Drop specified Linux capabilities.
      drop: [ALL]
    # -- Run the container in privileged mode.
    privileged: false
    # -- Enforce running the container as non-root. Leave `false` until the image is able to be run in rootless mode.
    runAsNonRoot: false
    # -- Run the container as the specified user id (uid). Leave `0` until the image is able to be run in rootless mode.
    runAsUser: 0
    # -- Run the container as the specified group id (gid). Leave `0` until the image is able to be run in rootless mode.
    runAsGroup: 0
    seccompProfile:
      # -- The Seccomp profile to apply to this container.
      type: RuntimeDefault
  # -- Optional security context for pods.
  podSecurityContext: {}

  # NodeSelector is a selector which must be true for the pod to fit on a node.
  # Selector which must match a node's labels for the pod to be scheduled on that node.
  # For more info see https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
  nodeSelector: {}

  # Optional pod node tolerations.
  # For more info see https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

ingress:
  enabled: false
  className: ""
  annotations: {}
    # cert-manager.io/cluster-issuer: letsencrypt-prod

# Custom certificates
customCertificateAuthority:
  existingSecret: ""
  configMapName: ""
  certificates: []
  # - name: rootCA.crt # Must have the .crt extension
  #   value: |
  #     -----BEGIN CERTIFICATE-----
  #     (SNIPPED FOR BREVITY)
  #     -----END CERTIFICATE-----

# External PostgreSQL
postgresql:
  custom:
    host: ""
    dbName: "r2devops"
    sslmode: "disable"
    port: 5432
  global:
    postgresql:

      # Not using secret for auth (comment if you use secret)
      auth:
        username: r2devops
        password: secretpassword
        postgresPassword: secretpassword

      # Using existing secret for auth password (uncomment if you use secret)
      # auth:
      #   username: r2devops
      #   existingSecret: "postgresql-secret"
      #   existingSecretType: "csi" # Remove or leave empty if secret is not managed by CSI Driver
      #   secretKeys:
      #     adminPasswordKey: "password"
      #     userPasswordKey: "password"

# External Redis
redis:
  custom:
    host: ""
    user: "default"
    port: 6379
    cert: ""
    databaseIndex: 0

  # Not using secret for auth (comment if you use secret)
  auth:
    password: secretpassword

  # Using existing secret for auth (uncomment if you use secret)
  # auth:
  #   existingSecret: "redis-secret"
  #   existingSecretPasswordKey: "password"
